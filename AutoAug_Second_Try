import torchvision.transforms as tt
from torchvision.transforms import Compose
from torchvision.datasets import ImageFolder
import os
from torch.utils.data import DataLoader
import torch.nn as nn
import torch
import torch.optim as optim





def main():

    def create_test_dataloader(dir, rot_H, rot_V, rot_R, train = False):


        #print(os.listdir(dir))
        print('Classes:')
        # os.remove(train_dir + '/.DS_Store')
        print(os.listdir(dir))

        if train == False:

            test_tf = tt.Compose([
                tt.Resize(size=(150, 150)),
                tt.ToTensor(),
            ])

        else:
            test_tf = tt.Compose([
                tt.Resize(size=(150, 150)),
                tt.RandomHorizontalFlip(p=rot_H),
                tt.RandomVerticalFlip(p=rot_V),
                tt.RandomRotation(rot_R),
                tt.ToTensor(),
            ])


        test_ds = ImageFolder(dir, test_tf)

        img, label = test_ds[0]
        print(img.shape)

        loader = DataLoader(
            test_ds,
            batch_size = 3,
            shuffle=True,
            pin_memory=True
        )


        return loader

    test_loader = create_test_dataloader('testing_dir/testing', rot_H = 0.5, rot_V =  0.5, rot_R = 45, train = False)
    train_loader = create_test_dataloader('testing_dir/training',rot_H = 0.5, rot_V =  0.5, rot_R = 90, train = True)

    #adding a transformed dataset to the original
    #increased_dataset = torch.utils.data.ConcatDataset([transformed_dataset,original])

    def build_model():
        model = nn.Sequential(nn.Flatten(), nn.Linear(67500, 128),
                              nn.ReLU(), nn.Linear(128, 64), nn.ReLU(), nn.Linear(64, 10))
        return model

    def train_model(model, train_loader, criterion, T):
        opt = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
        for epoch in range(T):  # loop over the dataset multiple times

            correct = 0
            total = len(train_loader.dataset)
            running_loss = 0.0

            model.train()

            for i, data in enumerate(train_loader, 0):
                # get the inputs; data is a list of [inputs, labels]
                inputs, labels = data

                # zero the parameter gradients
                opt.zero_grad()

                # forward + backward + optimize
                outputs = model(inputs)
                loss = criterion(outputs, labels)
                loss.backward()
                opt.step()
                pred = outputs.argmax(dim=1, keepdim=True)
                # print statistics
                running_loss += loss.item() * 50
                # total = len(train_loader)
                correct += pred.eq(labels.view_as(pred)).sum().item()

                ack = 100. * correct / total

                # if i % 500 == 499:  # print every 2000 mini-batches
            print(f'Train Epoch: {epoch}  Accuracy: {correct}/{total}({ack}%)  Loss: {running_loss / total:.3f}')

        return

    def evaluate_model(model, test_loader, criterion, show_loss=True):
        model.eval()

        eloss = []
        eack = []
        running_loss = 0
        correct = 0
        total = len(test_loader.dataset)

        with torch.no_grad():
            for data, labels in test_loader:
                output = model(data)
                loss = criterion(output, labels)
                running_loss += loss.item()

                pred = output.argmax(dim=1, keepdim=True)

                correct += pred.eq(labels.view_as(pred)).sum().item()

        test_loss = running_loss / len(test_loader.dataset)
        ack = 100. * correct / total

        eloss.append(test_loss)
        eack.append(ack)
        if show_loss == False:
            print(f'Accuracy: {ack}%')
        else:
            print(f'Average Loss: {test_loss}%')
            print(f'Accuracy: {ack}%')

        return

    criterion = nn.CrossEntropyLoss()

    model = build_model()
    print(model)
    train_model(model, train_loader, criterion, T=5)
    evaluate_model(model, test_loader, criterion, show_loss=True)

    return


if __name__ == '__main__':
    main()
